apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.protobuf'

description = 'auth-service'

configurations {
    ajc
    aspects
    compile {
        extendsFrom aspects
    }
}

dependencies {
    compile(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.security.oauth:spring-security-oauth2',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.cloud:spring-cloud-starter-kubernetes-config',
            'io.grpc:grpc-netty',
            'io.grpc:grpc-protobuf',
            'io.grpc:grpc-stub',
            'com.salesforce.servicelibs:reactor-grpc-stub',
            'net.devh:grpc-server-spring-boot-starter',
            'org.apache.commons:commons-lang3',
            'org.liquibase:liquibase-core',
            'com.google.guava:guava',
            'org.aspectj:aspectjrt',
            'org.aspectj:aspectjweaver',
            'org.postgresql:postgresql'
    )

    compileOnly(
            'org.projectlombok:lombok'
    )

    testCompile(
            'org.springframework.boot:spring-boot-starter-test',
            'io.projectreactor:reactor-test',
            'org.testcontainers:postgresql',
            'org.testcontainers:junit-jupiter',
            'com.ninja-squad:DbSetup',
            'org.assertj:assertj-db',
            'name.falgout.jeffrey.testing.junit5:mockito-extension',
            'org.junit.jupiter:junit-jupiter-api'
    )

    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine'
    )

    ajc(
            "org.aspectj:aspectjtools"
    )
    aspects(
            "org.springframework:spring-aspects"
    )
}

compileJava {
    doLast {
        aspectj project.sourceSets.main.output.classesDir.absolutePath,
                configurations.aspects.asPath,
                project.sourceSets.main.output.classesDir.absolutePath,
                configurations.compile.asPath
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${ver.protobuf}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${ver.grpc}"
        }
        reactor {
            artifact = "com.salesforce.servicelibs:reactor-grpc:${ver.reactiveGrpc}:jdk8@jar"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                option 'enable_deprecated=false'
            }
            reactor {}
        }
    }
}

idea {
    module {
        sourceDirs += file("$buildDir/generated/source/proto/main/java")
        sourceDirs += file("$buildDir/generated/source/proto/main/grpc")
        sourceDirs += file("$buildDir/generated/source/proto/main/reactor")
        generatedSourceDirs += file("$buildDir/generated/source/proto/main/java")
        generatedSourceDirs += file("$buildDir/generated/source/proto/main/grpc")
        generatedSourceDirs += file("$buildDir/generated/source/proto/main/reactor")
    }
}